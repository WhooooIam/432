import { MetadataBearer as $MetadataBearer, SmithyException as __SmithyException } from "@aws-sdk/types";

export interface Tag {
    
    Key?: string;
    
    Value?: string;
}
export declare namespace Tag {
    
    const filterSensitiveLog: (obj: Tag) => any;
}

export interface AddTagsToResourceMessage {
    
    ResourceName: string | undefined;
    
    Tags: Tag[] | undefined;
}
export declare namespace AddTagsToResourceMessage {
    
    const filterSensitiveLog: (obj: AddTagsToResourceMessage) => any;
}

export interface CacheClusterNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "CacheClusterNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheClusterNotFoundFault {
    
    const filterSensitiveLog: (obj: CacheClusterNotFoundFault) => any;
}

export interface CacheParameterGroupNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "CacheParameterGroupNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheParameterGroupNotFoundFault {
    
    const filterSensitiveLog: (obj: CacheParameterGroupNotFoundFault) => any;
}

export interface CacheSecurityGroupNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "CacheSecurityGroupNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheSecurityGroupNotFoundFault {
    
    const filterSensitiveLog: (obj: CacheSecurityGroupNotFoundFault) => any;
}

export interface CacheSubnetGroupNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "CacheSubnetGroupNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheSubnetGroupNotFoundFault {
    
    const filterSensitiveLog: (obj: CacheSubnetGroupNotFoundFault) => any;
}

export interface InvalidARNFault extends __SmithyException, $MetadataBearer {
    name: "InvalidARNFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidARNFault {
    
    const filterSensitiveLog: (obj: InvalidARNFault) => any;
}

export interface InvalidReplicationGroupStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidReplicationGroupStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidReplicationGroupStateFault {
    
    const filterSensitiveLog: (obj: InvalidReplicationGroupStateFault) => any;
}

export interface ReplicationGroupNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "ReplicationGroupNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace ReplicationGroupNotFoundFault {
    
    const filterSensitiveLog: (obj: ReplicationGroupNotFoundFault) => any;
}

export interface ReservedCacheNodeNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "ReservedCacheNodeNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace ReservedCacheNodeNotFoundFault {
    
    const filterSensitiveLog: (obj: ReservedCacheNodeNotFoundFault) => any;
}

export interface SnapshotNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "SnapshotNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace SnapshotNotFoundFault {
    
    const filterSensitiveLog: (obj: SnapshotNotFoundFault) => any;
}

export interface TagListMessage {
    
    TagList?: Tag[];
}
export declare namespace TagListMessage {
    
    const filterSensitiveLog: (obj: TagListMessage) => any;
}

export interface TagQuotaPerResourceExceeded extends __SmithyException, $MetadataBearer {
    name: "TagQuotaPerResourceExceeded";
    $fault: "client";
    message?: string;
}
export declare namespace TagQuotaPerResourceExceeded {
    
    const filterSensitiveLog: (obj: TagQuotaPerResourceExceeded) => any;
}

export interface UserGroupNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "UserGroupNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace UserGroupNotFoundFault {
    
    const filterSensitiveLog: (obj: UserGroupNotFoundFault) => any;
}

export interface UserNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "UserNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace UserNotFoundFault {
    
    const filterSensitiveLog: (obj: UserNotFoundFault) => any;
}

export interface AllowedNodeTypeModificationsMessage {
    
    ScaleUpModifications?: string[];
    
    ScaleDownModifications?: string[];
}
export declare namespace AllowedNodeTypeModificationsMessage {
    
    const filterSensitiveLog: (obj: AllowedNodeTypeModificationsMessage) => any;
}

export interface AuthorizationAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "AuthorizationAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace AuthorizationAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: AuthorizationAlreadyExistsFault) => any;
}

export interface AuthorizeCacheSecurityGroupIngressMessage {
    
    CacheSecurityGroupName: string | undefined;
    
    EC2SecurityGroupName: string | undefined;
    
    EC2SecurityGroupOwnerId: string | undefined;
}
export declare namespace AuthorizeCacheSecurityGroupIngressMessage {
    
    const filterSensitiveLog: (obj: AuthorizeCacheSecurityGroupIngressMessage) => any;
}

export interface EC2SecurityGroup {
    
    Status?: string;
    
    EC2SecurityGroupName?: string;
    
    EC2SecurityGroupOwnerId?: string;
}
export declare namespace EC2SecurityGroup {
    
    const filterSensitiveLog: (obj: EC2SecurityGroup) => any;
}

export interface CacheSecurityGroup {
    
    OwnerId?: string;
    
    CacheSecurityGroupName?: string;
    
    Description?: string;
    
    EC2SecurityGroups?: EC2SecurityGroup[];
    
    ARN?: string;
}
export declare namespace CacheSecurityGroup {
    
    const filterSensitiveLog: (obj: CacheSecurityGroup) => any;
}
export interface AuthorizeCacheSecurityGroupIngressResult {
    
    CacheSecurityGroup?: CacheSecurityGroup;
}
export declare namespace AuthorizeCacheSecurityGroupIngressResult {
    
    const filterSensitiveLog: (obj: AuthorizeCacheSecurityGroupIngressResult) => any;
}

export interface InvalidCacheSecurityGroupStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidCacheSecurityGroupStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidCacheSecurityGroupStateFault {
    
    const filterSensitiveLog: (obj: InvalidCacheSecurityGroupStateFault) => any;
}

export interface InvalidParameterCombinationException extends __SmithyException, $MetadataBearer {
    name: "InvalidParameterCombinationException";
    $fault: "client";
    
    message?: string;
}
export declare namespace InvalidParameterCombinationException {
    
    const filterSensitiveLog: (obj: InvalidParameterCombinationException) => any;
}

export interface InvalidParameterValueException extends __SmithyException, $MetadataBearer {
    name: "InvalidParameterValueException";
    $fault: "client";
    
    message?: string;
}
export declare namespace InvalidParameterValueException {
    
    const filterSensitiveLog: (obj: InvalidParameterValueException) => any;
}
export interface BatchApplyUpdateActionMessage {
    
    ReplicationGroupIds?: string[];
    
    CacheClusterIds?: string[];
    
    ServiceUpdateName: string | undefined;
}
export declare namespace BatchApplyUpdateActionMessage {
    
    const filterSensitiveLog: (obj: BatchApplyUpdateActionMessage) => any;
}

export interface ServiceUpdateNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "ServiceUpdateNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace ServiceUpdateNotFoundFault {
    
    const filterSensitiveLog: (obj: ServiceUpdateNotFoundFault) => any;
}
export declare enum UpdateActionStatus {
    COMPLETE = "complete",
    IN_PROGRESS = "in-progress",
    NOT_APPLICABLE = "not-applicable",
    NOT_APPLIED = "not-applied",
    SCHEDULED = "scheduled",
    SCHEDULING = "scheduling",
    STOPPED = "stopped",
    STOPPING = "stopping",
    WAITING_TO_START = "waiting-to-start"
}

export interface ProcessedUpdateAction {
    
    ReplicationGroupId?: string;
    
    CacheClusterId?: string;
    
    ServiceUpdateName?: string;
    
    UpdateActionStatus?: UpdateActionStatus | string;
}
export declare namespace ProcessedUpdateAction {
    
    const filterSensitiveLog: (obj: ProcessedUpdateAction) => any;
}

export interface UnprocessedUpdateAction {
    
    ReplicationGroupId?: string;
    
    CacheClusterId?: string;
    
    ServiceUpdateName?: string;
    
    ErrorType?: string;
    
    ErrorMessage?: string;
}
export declare namespace UnprocessedUpdateAction {
    
    const filterSensitiveLog: (obj: UnprocessedUpdateAction) => any;
}
export interface UpdateActionResultsMessage {
    
    ProcessedUpdateActions?: ProcessedUpdateAction[];
    
    UnprocessedUpdateActions?: UnprocessedUpdateAction[];
}
export declare namespace UpdateActionResultsMessage {
    
    const filterSensitiveLog: (obj: UpdateActionResultsMessage) => any;
}
export interface BatchStopUpdateActionMessage {
    
    ReplicationGroupIds?: string[];
    
    CacheClusterIds?: string[];
    
    ServiceUpdateName: string | undefined;
}
export declare namespace BatchStopUpdateActionMessage {
    
    const filterSensitiveLog: (obj: BatchStopUpdateActionMessage) => any;
}
export interface CompleteMigrationMessage {
    
    ReplicationGroupId: string | undefined;
    
    Force?: boolean;
}
export declare namespace CompleteMigrationMessage {
    
    const filterSensitiveLog: (obj: CompleteMigrationMessage) => any;
}
export declare enum AutomaticFailoverStatus {
    DISABLED = "disabled",
    DISABLING = "disabling",
    ENABLED = "enabled",
    ENABLING = "enabling"
}

export interface Endpoint {
    
    Address?: string;
    
    Port?: number;
}
export declare namespace Endpoint {
    
    const filterSensitiveLog: (obj: Endpoint) => any;
}

export interface GlobalReplicationGroupInfo {
    
    GlobalReplicationGroupId?: string;
    
    GlobalReplicationGroupMemberRole?: string;
}
export declare namespace GlobalReplicationGroupInfo {
    
    const filterSensitiveLog: (obj: GlobalReplicationGroupInfo) => any;
}

export interface CloudWatchLogsDestinationDetails {
    
    LogGroup?: string;
}
export declare namespace CloudWatchLogsDestinationDetails {
    
    const filterSensitiveLog: (obj: CloudWatchLogsDestinationDetails) => any;
}

export interface KinesisFirehoseDestinationDetails {
    
    DeliveryStream?: string;
}
export declare namespace KinesisFirehoseDestinationDetails {
    
    const filterSensitiveLog: (obj: KinesisFirehoseDestinationDetails) => any;
}

export interface DestinationDetails {
    
    CloudWatchLogsDetails?: CloudWatchLogsDestinationDetails;
    
    KinesisFirehoseDetails?: KinesisFirehoseDestinationDetails;
}
export declare namespace DestinationDetails {
    
    const filterSensitiveLog: (obj: DestinationDetails) => any;
}
export declare enum DestinationType {
    CloudWatchLogs = "cloudwatch-logs",
    KinesisFirehose = "kinesis-firehose"
}
export declare enum LogFormat {
    JSON = "json",
    TEXT = "text"
}
export declare enum LogType {
    SLOW_LOG = "slow-log"
}
export declare enum LogDeliveryConfigurationStatus {
    ACTIVE = "active",
    DISABLING = "disabling",
    ENABLING = "enabling",
    ERROR = "error",
    MODIFYING = "modifying"
}

export interface LogDeliveryConfiguration {
    
    LogType?: LogType | string;
    
    DestinationType?: DestinationType | string;
    
    DestinationDetails?: DestinationDetails;
    
    LogFormat?: LogFormat | string;
    
    Status?: LogDeliveryConfigurationStatus | string;
    
    Message?: string;
}
export declare namespace LogDeliveryConfiguration {
    
    const filterSensitiveLog: (obj: LogDeliveryConfiguration) => any;
}
export declare enum MultiAZStatus {
    DISABLED = "disabled",
    ENABLED = "enabled"
}

export interface NodeGroupMember {
    
    CacheClusterId?: string;
    
    CacheNodeId?: string;
    
    ReadEndpoint?: Endpoint;
    
    PreferredAvailabilityZone?: string;
    
    PreferredOutpostArn?: string;
    
    CurrentRole?: string;
}
export declare namespace NodeGroupMember {
    
    const filterSensitiveLog: (obj: NodeGroupMember) => any;
}

export interface NodeGroup {
    
    NodeGroupId?: string;
    
    Status?: string;
    
    PrimaryEndpoint?: Endpoint;
    
    ReaderEndpoint?: Endpoint;
    
    Slots?: string;
    
    NodeGroupMembers?: NodeGroupMember[];
}
export declare namespace NodeGroup {
    
    const filterSensitiveLog: (obj: NodeGroup) => any;
}
export declare type AuthTokenUpdateStatus = "ROTATING" | "SETTING";
export declare enum PendingAutomaticFailoverStatus {
    DISABLED = "disabled",
    ENABLED = "enabled"
}

export interface PendingLogDeliveryConfiguration {
    
    LogType?: LogType | string;
    
    DestinationType?: DestinationType | string;
    
    DestinationDetails?: DestinationDetails;
    
    LogFormat?: LogFormat | string;
}
export declare namespace PendingLogDeliveryConfiguration {
    
    const filterSensitiveLog: (obj: PendingLogDeliveryConfiguration) => any;
}

export interface SlotMigration {
    
    ProgressPercentage?: number;
}
export declare namespace SlotMigration {
    
    const filterSensitiveLog: (obj: SlotMigration) => any;
}

export interface ReshardingStatus {
    
    SlotMigration?: SlotMigration;
}
export declare namespace ReshardingStatus {
    
    const filterSensitiveLog: (obj: ReshardingStatus) => any;
}

export interface UserGroupsUpdateStatus {
    
    UserGroupIdsToAdd?: string[];
    
    UserGroupIdsToRemove?: string[];
}
export declare namespace UserGroupsUpdateStatus {
    
    const filterSensitiveLog: (obj: UserGroupsUpdateStatus) => any;
}

export interface ReplicationGroupPendingModifiedValues {
    
    PrimaryClusterId?: string;
    
    AutomaticFailoverStatus?: PendingAutomaticFailoverStatus | string;
    
    Resharding?: ReshardingStatus;
    
    AuthTokenStatus?: AuthTokenUpdateStatus | string;
    
    UserGroups?: UserGroupsUpdateStatus;
    
    LogDeliveryConfigurations?: PendingLogDeliveryConfiguration[];
}
export declare namespace ReplicationGroupPendingModifiedValues {
    
    const filterSensitiveLog: (obj: ReplicationGroupPendingModifiedValues) => any;
}

export interface ReplicationGroup {
    
    ReplicationGroupId?: string;
    
    Description?: string;
    
    GlobalReplicationGroupInfo?: GlobalReplicationGroupInfo;
    
    Status?: string;
    
    PendingModifiedValues?: ReplicationGroupPendingModifiedValues;
    
    MemberClusters?: string[];
    
    NodeGroups?: NodeGroup[];
    
    SnapshottingClusterId?: string;
    
    AutomaticFailover?: AutomaticFailoverStatus | string;
    
    MultiAZ?: MultiAZStatus | string;
    
    ConfigurationEndpoint?: Endpoint;
    
    SnapshotRetentionLimit?: number;
    
    SnapshotWindow?: string;
    
    ClusterEnabled?: boolean;
    
    CacheNodeType?: string;
    
    AuthTokenEnabled?: boolean;
    
    AuthTokenLastModifiedDate?: Date;
    
    TransitEncryptionEnabled?: boolean;
    
    AtRestEncryptionEnabled?: boolean;
    
    MemberClustersOutpostArns?: string[];
    
    KmsKeyId?: string;
    
    ARN?: string;
    
    UserGroupIds?: string[];
    
    LogDeliveryConfigurations?: LogDeliveryConfiguration[];
    
    ReplicationGroupCreateTime?: Date;
}
export declare namespace ReplicationGroup {
    
    const filterSensitiveLog: (obj: ReplicationGroup) => any;
}
export interface CompleteMigrationResponse {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace CompleteMigrationResponse {
    
    const filterSensitiveLog: (obj: CompleteMigrationResponse) => any;
}

export interface ReplicationGroupNotUnderMigrationFault extends __SmithyException, $MetadataBearer {
    name: "ReplicationGroupNotUnderMigrationFault";
    $fault: "client";
    message?: string;
}
export declare namespace ReplicationGroupNotUnderMigrationFault {
    
    const filterSensitiveLog: (obj: ReplicationGroupNotUnderMigrationFault) => any;
}

export interface CopySnapshotMessage {
    
    SourceSnapshotName: string | undefined;
    
    TargetSnapshotName: string | undefined;
    
    TargetBucket?: string;
    
    KmsKeyId?: string;
    
    Tags?: Tag[];
}
export declare namespace CopySnapshotMessage {
    
    const filterSensitiveLog: (obj: CopySnapshotMessage) => any;
}

export interface NodeGroupConfiguration {
    
    NodeGroupId?: string;
    
    Slots?: string;
    
    ReplicaCount?: number;
    
    PrimaryAvailabilityZone?: string;
    
    ReplicaAvailabilityZones?: string[];
    
    PrimaryOutpostArn?: string;
    
    ReplicaOutpostArns?: string[];
}
export declare namespace NodeGroupConfiguration {
    
    const filterSensitiveLog: (obj: NodeGroupConfiguration) => any;
}

export interface NodeSnapshot {
    
    CacheClusterId?: string;
    
    NodeGroupId?: string;
    
    CacheNodeId?: string;
    
    NodeGroupConfiguration?: NodeGroupConfiguration;
    
    CacheSize?: string;
    
    CacheNodeCreateTime?: Date;
    
    SnapshotCreateTime?: Date;
}
export declare namespace NodeSnapshot {
    
    const filterSensitiveLog: (obj: NodeSnapshot) => any;
}

export interface Snapshot {
    
    SnapshotName?: string;
    
    ReplicationGroupId?: string;
    
    ReplicationGroupDescription?: string;
    
    CacheClusterId?: string;
    
    SnapshotStatus?: string;
    
    SnapshotSource?: string;
    
    CacheNodeType?: string;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    NumCacheNodes?: number;
    
    PreferredAvailabilityZone?: string;
    
    PreferredOutpostArn?: string;
    
    CacheClusterCreateTime?: Date;
    
    PreferredMaintenanceWindow?: string;
    
    TopicArn?: string;
    
    Port?: number;
    
    CacheParameterGroupName?: string;
    
    CacheSubnetGroupName?: string;
    
    VpcId?: string;
    
    AutoMinorVersionUpgrade?: boolean;
    
    SnapshotRetentionLimit?: number;
    
    SnapshotWindow?: string;
    
    NumNodeGroups?: number;
    
    AutomaticFailover?: AutomaticFailoverStatus | string;
    
    NodeSnapshots?: NodeSnapshot[];
    
    KmsKeyId?: string;
    
    ARN?: string;
}
export declare namespace Snapshot {
    
    const filterSensitiveLog: (obj: Snapshot) => any;
}
export interface CopySnapshotResult {
    
    Snapshot?: Snapshot;
}
export declare namespace CopySnapshotResult {
    
    const filterSensitiveLog: (obj: CopySnapshotResult) => any;
}

export interface InvalidSnapshotStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidSnapshotStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidSnapshotStateFault {
    
    const filterSensitiveLog: (obj: InvalidSnapshotStateFault) => any;
}

export interface SnapshotAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "SnapshotAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace SnapshotAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: SnapshotAlreadyExistsFault) => any;
}

export interface SnapshotQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "SnapshotQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace SnapshotQuotaExceededFault {
    
    const filterSensitiveLog: (obj: SnapshotQuotaExceededFault) => any;
}

export interface CacheClusterAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "CacheClusterAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheClusterAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: CacheClusterAlreadyExistsFault) => any;
}

export interface ClusterQuotaForCustomerExceededFault extends __SmithyException, $MetadataBearer {
    name: "ClusterQuotaForCustomerExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace ClusterQuotaForCustomerExceededFault {
    
    const filterSensitiveLog: (obj: ClusterQuotaForCustomerExceededFault) => any;
}
export declare enum AZMode {
    CROSS_AZ = "cross-az",
    SINGLE_AZ = "single-az"
}

export interface LogDeliveryConfigurationRequest {
    
    LogType?: LogType | string;
    
    DestinationType?: DestinationType | string;
    
    DestinationDetails?: DestinationDetails;
    
    LogFormat?: LogFormat | string;
    
    Enabled?: boolean;
}
export declare namespace LogDeliveryConfigurationRequest {
    
    const filterSensitiveLog: (obj: LogDeliveryConfigurationRequest) => any;
}
export declare enum OutpostMode {
    CROSS_OUTPOST = "cross-outpost",
    SINGLE_OUTPOST = "single-outpost"
}

export interface CreateCacheClusterMessage {
    
    CacheClusterId: string | undefined;
    
    ReplicationGroupId?: string;
    
    AZMode?: AZMode | string;
    
    PreferredAvailabilityZone?: string;
    
    PreferredAvailabilityZones?: string[];
    
    NumCacheNodes?: number;
    
    CacheNodeType?: string;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    CacheParameterGroupName?: string;
    
    CacheSubnetGroupName?: string;
    
    CacheSecurityGroupNames?: string[];
    
    SecurityGroupIds?: string[];
    
    Tags?: Tag[];
    
    SnapshotArns?: string[];
    
    SnapshotName?: string;
    
    PreferredMaintenanceWindow?: string;
    
    Port?: number;
    
    NotificationTopicArn?: string;
    
    AutoMinorVersionUpgrade?: boolean;
    
    SnapshotRetentionLimit?: number;
    
    SnapshotWindow?: string;
    
    AuthToken?: string;
    
    OutpostMode?: OutpostMode | string;
    
    PreferredOutpostArn?: string;
    
    PreferredOutpostArns?: string[];
    
    LogDeliveryConfigurations?: LogDeliveryConfigurationRequest[];
}
export declare namespace CreateCacheClusterMessage {
    
    const filterSensitiveLog: (obj: CreateCacheClusterMessage) => any;
}

export interface CacheNode {
    
    CacheNodeId?: string;
    
    CacheNodeStatus?: string;
    
    CacheNodeCreateTime?: Date;
    
    Endpoint?: Endpoint;
    
    ParameterGroupStatus?: string;
    
    SourceCacheNodeId?: string;
    
    CustomerAvailabilityZone?: string;
    
    CustomerOutpostArn?: string;
}
export declare namespace CacheNode {
    
    const filterSensitiveLog: (obj: CacheNode) => any;
}

export interface CacheParameterGroupStatus {
    
    CacheParameterGroupName?: string;
    
    ParameterApplyStatus?: string;
    
    CacheNodeIdsToReboot?: string[];
}
export declare namespace CacheParameterGroupStatus {
    
    const filterSensitiveLog: (obj: CacheParameterGroupStatus) => any;
}

export interface CacheSecurityGroupMembership {
    
    CacheSecurityGroupName?: string;
    
    Status?: string;
}
export declare namespace CacheSecurityGroupMembership {
    
    const filterSensitiveLog: (obj: CacheSecurityGroupMembership) => any;
}

export interface NotificationConfiguration {
    
    TopicArn?: string;
    
    TopicStatus?: string;
}
export declare namespace NotificationConfiguration {
    
    const filterSensitiveLog: (obj: NotificationConfiguration) => any;
}

export interface PendingModifiedValues {
    
    NumCacheNodes?: number;
    
    CacheNodeIdsToRemove?: string[];
    
    EngineVersion?: string;
    
    CacheNodeType?: string;
    
    AuthTokenStatus?: AuthTokenUpdateStatus | string;
    
    LogDeliveryConfigurations?: PendingLogDeliveryConfiguration[];
}
export declare namespace PendingModifiedValues {
    
    const filterSensitiveLog: (obj: PendingModifiedValues) => any;
}

export interface SecurityGroupMembership {
    
    SecurityGroupId?: string;
    
    Status?: string;
}
export declare namespace SecurityGroupMembership {
    
    const filterSensitiveLog: (obj: SecurityGroupMembership) => any;
}

export interface CacheCluster {
    
    CacheClusterId?: string;
    
    ConfigurationEndpoint?: Endpoint;
    
    ClientDownloadLandingPage?: string;
    
    CacheNodeType?: string;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    CacheClusterStatus?: string;
    
    NumCacheNodes?: number;
    
    PreferredAvailabilityZone?: string;
    
    PreferredOutpostArn?: string;
    
    CacheClusterCreateTime?: Date;
    
    PreferredMaintenanceWindow?: string;
    
    PendingModifiedValues?: PendingModifiedValues;
    
    NotificationConfiguration?: NotificationConfiguration;
    
    CacheSecurityGroups?: CacheSecurityGroupMembership[];
    
    CacheParameterGroup?: CacheParameterGroupStatus;
    
    CacheSubnetGroupName?: string;
    
    CacheNodes?: CacheNode[];
    
    AutoMinorVersionUpgrade?: boolean;
    
    SecurityGroups?: SecurityGroupMembership[];
    
    ReplicationGroupId?: string;
    
    SnapshotRetentionLimit?: number;
    
    SnapshotWindow?: string;
    
    AuthTokenEnabled?: boolean;
    
    AuthTokenLastModifiedDate?: Date;
    
    TransitEncryptionEnabled?: boolean;
    
    AtRestEncryptionEnabled?: boolean;
    
    ARN?: string;
    
    ReplicationGroupLogDeliveryEnabled?: boolean;
    
    LogDeliveryConfigurations?: LogDeliveryConfiguration[];
}
export declare namespace CacheCluster {
    
    const filterSensitiveLog: (obj: CacheCluster) => any;
}
export interface CreateCacheClusterResult {
    
    CacheCluster?: CacheCluster;
}
export declare namespace CreateCacheClusterResult {
    
    const filterSensitiveLog: (obj: CreateCacheClusterResult) => any;
}

export interface InsufficientCacheClusterCapacityFault extends __SmithyException, $MetadataBearer {
    name: "InsufficientCacheClusterCapacityFault";
    $fault: "client";
    message?: string;
}
export declare namespace InsufficientCacheClusterCapacityFault {
    
    const filterSensitiveLog: (obj: InsufficientCacheClusterCapacityFault) => any;
}

export interface InvalidVPCNetworkStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidVPCNetworkStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidVPCNetworkStateFault {
    
    const filterSensitiveLog: (obj: InvalidVPCNetworkStateFault) => any;
}

export interface NodeQuotaForClusterExceededFault extends __SmithyException, $MetadataBearer {
    name: "NodeQuotaForClusterExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace NodeQuotaForClusterExceededFault {
    
    const filterSensitiveLog: (obj: NodeQuotaForClusterExceededFault) => any;
}

export interface NodeQuotaForCustomerExceededFault extends __SmithyException, $MetadataBearer {
    name: "NodeQuotaForCustomerExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace NodeQuotaForCustomerExceededFault {
    
    const filterSensitiveLog: (obj: NodeQuotaForCustomerExceededFault) => any;
}

export interface CacheParameterGroupAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "CacheParameterGroupAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheParameterGroupAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: CacheParameterGroupAlreadyExistsFault) => any;
}

export interface CacheParameterGroupQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "CacheParameterGroupQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheParameterGroupQuotaExceededFault {
    
    const filterSensitiveLog: (obj: CacheParameterGroupQuotaExceededFault) => any;
}

export interface CreateCacheParameterGroupMessage {
    
    CacheParameterGroupName: string | undefined;
    
    CacheParameterGroupFamily: string | undefined;
    
    Description: string | undefined;
    
    Tags?: Tag[];
}
export declare namespace CreateCacheParameterGroupMessage {
    
    const filterSensitiveLog: (obj: CreateCacheParameterGroupMessage) => any;
}

export interface CacheParameterGroup {
    
    CacheParameterGroupName?: string;
    
    CacheParameterGroupFamily?: string;
    
    Description?: string;
    
    IsGlobal?: boolean;
    
    ARN?: string;
}
export declare namespace CacheParameterGroup {
    
    const filterSensitiveLog: (obj: CacheParameterGroup) => any;
}
export interface CreateCacheParameterGroupResult {
    
    CacheParameterGroup?: CacheParameterGroup;
}
export declare namespace CreateCacheParameterGroupResult {
    
    const filterSensitiveLog: (obj: CreateCacheParameterGroupResult) => any;
}

export interface InvalidCacheParameterGroupStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidCacheParameterGroupStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidCacheParameterGroupStateFault {
    
    const filterSensitiveLog: (obj: InvalidCacheParameterGroupStateFault) => any;
}

export interface CacheSecurityGroupAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "CacheSecurityGroupAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheSecurityGroupAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: CacheSecurityGroupAlreadyExistsFault) => any;
}

export interface CacheSecurityGroupQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "CacheSecurityGroupQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheSecurityGroupQuotaExceededFault {
    
    const filterSensitiveLog: (obj: CacheSecurityGroupQuotaExceededFault) => any;
}

export interface CreateCacheSecurityGroupMessage {
    
    CacheSecurityGroupName: string | undefined;
    
    Description: string | undefined;
    
    Tags?: Tag[];
}
export declare namespace CreateCacheSecurityGroupMessage {
    
    const filterSensitiveLog: (obj: CreateCacheSecurityGroupMessage) => any;
}
export interface CreateCacheSecurityGroupResult {
    
    CacheSecurityGroup?: CacheSecurityGroup;
}
export declare namespace CreateCacheSecurityGroupResult {
    
    const filterSensitiveLog: (obj: CreateCacheSecurityGroupResult) => any;
}

export interface CacheSubnetGroupAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "CacheSubnetGroupAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheSubnetGroupAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: CacheSubnetGroupAlreadyExistsFault) => any;
}

export interface CacheSubnetGroupQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "CacheSubnetGroupQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheSubnetGroupQuotaExceededFault {
    
    const filterSensitiveLog: (obj: CacheSubnetGroupQuotaExceededFault) => any;
}

export interface CacheSubnetQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "CacheSubnetQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace CacheSubnetQuotaExceededFault {
    
    const filterSensitiveLog: (obj: CacheSubnetQuotaExceededFault) => any;
}

export interface CreateCacheSubnetGroupMessage {
    
    CacheSubnetGroupName: string | undefined;
    
    CacheSubnetGroupDescription: string | undefined;
    
    SubnetIds: string[] | undefined;
    
    Tags?: Tag[];
}
export declare namespace CreateCacheSubnetGroupMessage {
    
    const filterSensitiveLog: (obj: CreateCacheSubnetGroupMessage) => any;
}

export interface AvailabilityZone {
    
    Name?: string;
}
export declare namespace AvailabilityZone {
    
    const filterSensitiveLog: (obj: AvailabilityZone) => any;
}

export interface SubnetOutpost {
    
    SubnetOutpostArn?: string;
}
export declare namespace SubnetOutpost {
    
    const filterSensitiveLog: (obj: SubnetOutpost) => any;
}

export interface Subnet {
    
    SubnetIdentifier?: string;
    
    SubnetAvailabilityZone?: AvailabilityZone;
    
    SubnetOutpost?: SubnetOutpost;
}
export declare namespace Subnet {
    
    const filterSensitiveLog: (obj: Subnet) => any;
}

export interface CacheSubnetGroup {
    
    CacheSubnetGroupName?: string;
    
    CacheSubnetGroupDescription?: string;
    
    VpcId?: string;
    
    Subnets?: Subnet[];
    
    ARN?: string;
}
export declare namespace CacheSubnetGroup {
    
    const filterSensitiveLog: (obj: CacheSubnetGroup) => any;
}
export interface CreateCacheSubnetGroupResult {
    
    CacheSubnetGroup?: CacheSubnetGroup;
}
export declare namespace CreateCacheSubnetGroupResult {
    
    const filterSensitiveLog: (obj: CreateCacheSubnetGroupResult) => any;
}

export interface InvalidSubnet extends __SmithyException, $MetadataBearer {
    name: "InvalidSubnet";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidSubnet {
    
    const filterSensitiveLog: (obj: InvalidSubnet) => any;
}

export interface SubnetNotAllowedFault extends __SmithyException, $MetadataBearer {
    name: "SubnetNotAllowedFault";
    $fault: "client";
    message?: string;
}
export declare namespace SubnetNotAllowedFault {
    
    const filterSensitiveLog: (obj: SubnetNotAllowedFault) => any;
}
export interface CreateGlobalReplicationGroupMessage {
    
    GlobalReplicationGroupIdSuffix: string | undefined;
    
    GlobalReplicationGroupDescription?: string;
    
    PrimaryReplicationGroupId: string | undefined;
}
export declare namespace CreateGlobalReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: CreateGlobalReplicationGroupMessage) => any;
}

export interface GlobalNodeGroup {
    
    GlobalNodeGroupId?: string;
    
    Slots?: string;
}
export declare namespace GlobalNodeGroup {
    
    const filterSensitiveLog: (obj: GlobalNodeGroup) => any;
}

export interface GlobalReplicationGroupMember {
    
    ReplicationGroupId?: string;
    
    ReplicationGroupRegion?: string;
    
    Role?: string;
    
    AutomaticFailover?: AutomaticFailoverStatus | string;
    
    Status?: string;
}
export declare namespace GlobalReplicationGroupMember {
    
    const filterSensitiveLog: (obj: GlobalReplicationGroupMember) => any;
}

export interface GlobalReplicationGroup {
    
    GlobalReplicationGroupId?: string;
    
    GlobalReplicationGroupDescription?: string;
    
    Status?: string;
    
    CacheNodeType?: string;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    Members?: GlobalReplicationGroupMember[];
    
    ClusterEnabled?: boolean;
    
    GlobalNodeGroups?: GlobalNodeGroup[];
    
    AuthTokenEnabled?: boolean;
    
    TransitEncryptionEnabled?: boolean;
    
    AtRestEncryptionEnabled?: boolean;
    
    ARN?: string;
}
export declare namespace GlobalReplicationGroup {
    
    const filterSensitiveLog: (obj: GlobalReplicationGroup) => any;
}
export interface CreateGlobalReplicationGroupResult {
    
    GlobalReplicationGroup?: GlobalReplicationGroup;
}
export declare namespace CreateGlobalReplicationGroupResult {
    
    const filterSensitiveLog: (obj: CreateGlobalReplicationGroupResult) => any;
}

export interface GlobalReplicationGroupAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "GlobalReplicationGroupAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace GlobalReplicationGroupAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: GlobalReplicationGroupAlreadyExistsFault) => any;
}

export interface ServiceLinkedRoleNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "ServiceLinkedRoleNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace ServiceLinkedRoleNotFoundFault {
    
    const filterSensitiveLog: (obj: ServiceLinkedRoleNotFoundFault) => any;
}

export interface CreateReplicationGroupMessage {
    
    ReplicationGroupId: string | undefined;
    
    ReplicationGroupDescription: string | undefined;
    
    GlobalReplicationGroupId?: string;
    
    PrimaryClusterId?: string;
    
    AutomaticFailoverEnabled?: boolean;
    
    MultiAZEnabled?: boolean;
    
    NumCacheClusters?: number;
    
    PreferredCacheClusterAZs?: string[];
    
    NumNodeGroups?: number;
    
    ReplicasPerNodeGroup?: number;
    
    NodeGroupConfiguration?: NodeGroupConfiguration[];
    
    CacheNodeType?: string;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    CacheParameterGroupName?: string;
    
    CacheSubnetGroupName?: string;
    
    CacheSecurityGroupNames?: string[];
    
    SecurityGroupIds?: string[];
    
    Tags?: Tag[];
    
    SnapshotArns?: string[];
    
    SnapshotName?: string;
    
    PreferredMaintenanceWindow?: string;
    
    Port?: number;
    
    NotificationTopicArn?: string;
    
    AutoMinorVersionUpgrade?: boolean;
    
    SnapshotRetentionLimit?: number;
    
    SnapshotWindow?: string;
    
    AuthToken?: string;
    
    TransitEncryptionEnabled?: boolean;
    
    AtRestEncryptionEnabled?: boolean;
    
    KmsKeyId?: string;
    
    UserGroupIds?: string[];
    
    LogDeliveryConfigurations?: LogDeliveryConfigurationRequest[];
}
export declare namespace CreateReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: CreateReplicationGroupMessage) => any;
}
export interface CreateReplicationGroupResult {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace CreateReplicationGroupResult {
    
    const filterSensitiveLog: (obj: CreateReplicationGroupResult) => any;
}

export interface GlobalReplicationGroupNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "GlobalReplicationGroupNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace GlobalReplicationGroupNotFoundFault {
    
    const filterSensitiveLog: (obj: GlobalReplicationGroupNotFoundFault) => any;
}

export interface InvalidCacheClusterStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidCacheClusterStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidCacheClusterStateFault {
    
    const filterSensitiveLog: (obj: InvalidCacheClusterStateFault) => any;
}

export interface InvalidGlobalReplicationGroupStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidGlobalReplicationGroupStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidGlobalReplicationGroupStateFault {
    
    const filterSensitiveLog: (obj: InvalidGlobalReplicationGroupStateFault) => any;
}

export interface InvalidUserGroupStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidUserGroupStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidUserGroupStateFault {
    
    const filterSensitiveLog: (obj: InvalidUserGroupStateFault) => any;
}

export interface NodeGroupsPerReplicationGroupQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "NodeGroupsPerReplicationGroupQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace NodeGroupsPerReplicationGroupQuotaExceededFault {
    
    const filterSensitiveLog: (obj: NodeGroupsPerReplicationGroupQuotaExceededFault) => any;
}

export interface ReplicationGroupAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "ReplicationGroupAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace ReplicationGroupAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: ReplicationGroupAlreadyExistsFault) => any;
}

export interface CreateSnapshotMessage {
    
    ReplicationGroupId?: string;
    
    CacheClusterId?: string;
    
    SnapshotName: string | undefined;
    
    KmsKeyId?: string;
    
    Tags?: Tag[];
}
export declare namespace CreateSnapshotMessage {
    
    const filterSensitiveLog: (obj: CreateSnapshotMessage) => any;
}
export interface CreateSnapshotResult {
    
    Snapshot?: Snapshot;
}
export declare namespace CreateSnapshotResult {
    
    const filterSensitiveLog: (obj: CreateSnapshotResult) => any;
}

export interface SnapshotFeatureNotSupportedFault extends __SmithyException, $MetadataBearer {
    name: "SnapshotFeatureNotSupportedFault";
    $fault: "client";
    message?: string;
}
export declare namespace SnapshotFeatureNotSupportedFault {
    
    const filterSensitiveLog: (obj: SnapshotFeatureNotSupportedFault) => any;
}
export interface CreateUserMessage {
    
    UserId: string | undefined;
    
    UserName: string | undefined;
    
    Engine: string | undefined;
    
    Passwords?: string[];
    
    AccessString: string | undefined;
    
    NoPasswordRequired?: boolean;
    
    Tags?: Tag[];
}
export declare namespace CreateUserMessage {
    
    const filterSensitiveLog: (obj: CreateUserMessage) => any;
}

export interface DuplicateUserNameFault extends __SmithyException, $MetadataBearer {
    name: "DuplicateUserNameFault";
    $fault: "client";
    message?: string;
}
export declare namespace DuplicateUserNameFault {
    
    const filterSensitiveLog: (obj: DuplicateUserNameFault) => any;
}
export declare enum AuthenticationType {
    NO_PASSWORD = "no-password",
    PASSWORD = "password"
}

export interface Authentication {
    
    Type?: AuthenticationType | string;
    
    PasswordCount?: number;
}
export declare namespace Authentication {
    
    const filterSensitiveLog: (obj: Authentication) => any;
}
export interface User {
    
    UserId?: string;
    
    UserName?: string;
    
    Status?: string;
    
    Engine?: string;
    
    AccessString?: string;
    
    UserGroupIds?: string[];
    
    Authentication?: Authentication;
    
    ARN?: string;
}
export declare namespace User {
    
    const filterSensitiveLog: (obj: User) => any;
}

export interface UserAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "UserAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace UserAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: UserAlreadyExistsFault) => any;
}

export interface UserQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "UserQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace UserQuotaExceededFault {
    
    const filterSensitiveLog: (obj: UserQuotaExceededFault) => any;
}
export interface CreateUserGroupMessage {
    
    UserGroupId: string | undefined;
    
    Engine: string | undefined;
    
    UserIds?: string[];
    
    Tags?: Tag[];
}
export declare namespace CreateUserGroupMessage {
    
    const filterSensitiveLog: (obj: CreateUserGroupMessage) => any;
}

export interface DefaultUserRequired extends __SmithyException, $MetadataBearer {
    name: "DefaultUserRequired";
    $fault: "client";
    message?: string;
}
export declare namespace DefaultUserRequired {
    
    const filterSensitiveLog: (obj: DefaultUserRequired) => any;
}

export interface UserGroupPendingChanges {
    
    UserIdsToRemove?: string[];
    
    UserIdsToAdd?: string[];
}
export declare namespace UserGroupPendingChanges {
    
    const filterSensitiveLog: (obj: UserGroupPendingChanges) => any;
}
export interface UserGroup {
    
    UserGroupId?: string;
    
    Status?: string;
    
    Engine?: string;
    
    UserIds?: string[];
    
    PendingChanges?: UserGroupPendingChanges;
    
    ReplicationGroups?: string[];
    
    ARN?: string;
}
export declare namespace UserGroup {
    
    const filterSensitiveLog: (obj: UserGroup) => any;
}

export interface UserGroupAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "UserGroupAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace UserGroupAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: UserGroupAlreadyExistsFault) => any;
}

export interface UserGroupQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "UserGroupQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace UserGroupQuotaExceededFault {
    
    const filterSensitiveLog: (obj: UserGroupQuotaExceededFault) => any;
}
export interface DecreaseNodeGroupsInGlobalReplicationGroupMessage {
    
    GlobalReplicationGroupId: string | undefined;
    
    NodeGroupCount: number | undefined;
    
    GlobalNodeGroupsToRemove?: string[];
    
    GlobalNodeGroupsToRetain?: string[];
    
    ApplyImmediately: boolean | undefined;
}
export declare namespace DecreaseNodeGroupsInGlobalReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: DecreaseNodeGroupsInGlobalReplicationGroupMessage) => any;
}
export interface DecreaseNodeGroupsInGlobalReplicationGroupResult {
    
    GlobalReplicationGroup?: GlobalReplicationGroup;
}
export declare namespace DecreaseNodeGroupsInGlobalReplicationGroupResult {
    
    const filterSensitiveLog: (obj: DecreaseNodeGroupsInGlobalReplicationGroupResult) => any;
}

export interface ConfigureShard {
    
    NodeGroupId: string | undefined;
    
    NewReplicaCount: number | undefined;
    
    PreferredAvailabilityZones?: string[];
    
    PreferredOutpostArns?: string[];
}
export declare namespace ConfigureShard {
    
    const filterSensitiveLog: (obj: ConfigureShard) => any;
}
export interface DecreaseReplicaCountMessage {
    
    ReplicationGroupId: string | undefined;
    
    NewReplicaCount?: number;
    
    ReplicaConfiguration?: ConfigureShard[];
    
    ReplicasToRemove?: string[];
    
    ApplyImmediately: boolean | undefined;
}
export declare namespace DecreaseReplicaCountMessage {
    
    const filterSensitiveLog: (obj: DecreaseReplicaCountMessage) => any;
}
export interface DecreaseReplicaCountResult {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace DecreaseReplicaCountResult {
    
    const filterSensitiveLog: (obj: DecreaseReplicaCountResult) => any;
}

export interface NoOperationFault extends __SmithyException, $MetadataBearer {
    name: "NoOperationFault";
    $fault: "client";
    message?: string;
}
export declare namespace NoOperationFault {
    
    const filterSensitiveLog: (obj: NoOperationFault) => any;
}

export interface DeleteCacheClusterMessage {
    
    CacheClusterId: string | undefined;
    
    FinalSnapshotIdentifier?: string;
}
export declare namespace DeleteCacheClusterMessage {
    
    const filterSensitiveLog: (obj: DeleteCacheClusterMessage) => any;
}
export interface DeleteCacheClusterResult {
    
    CacheCluster?: CacheCluster;
}
export declare namespace DeleteCacheClusterResult {
    
    const filterSensitiveLog: (obj: DeleteCacheClusterResult) => any;
}

export interface DeleteCacheParameterGroupMessage {
    
    CacheParameterGroupName: string | undefined;
}
export declare namespace DeleteCacheParameterGroupMessage {
    
    const filterSensitiveLog: (obj: DeleteCacheParameterGroupMessage) => any;
}

export interface DeleteCacheSecurityGroupMessage {
    
    CacheSecurityGroupName: string | undefined;
}
export declare namespace DeleteCacheSecurityGroupMessage {
    
    const filterSensitiveLog: (obj: DeleteCacheSecurityGroupMessage) => any;
}

export interface CacheSubnetGroupInUse extends __SmithyException, $MetadataBearer {
    name: "CacheSubnetGroupInUse";
    $fault: "client";
    message?: string;
}
export declare namespace CacheSubnetGroupInUse {
    
    const filterSensitiveLog: (obj: CacheSubnetGroupInUse) => any;
}

export interface DeleteCacheSubnetGroupMessage {
    
    CacheSubnetGroupName: string | undefined;
}
export declare namespace DeleteCacheSubnetGroupMessage {
    
    const filterSensitiveLog: (obj: DeleteCacheSubnetGroupMessage) => any;
}
export interface DeleteGlobalReplicationGroupMessage {
    
    GlobalReplicationGroupId: string | undefined;
    
    RetainPrimaryReplicationGroup: boolean | undefined;
}
export declare namespace DeleteGlobalReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: DeleteGlobalReplicationGroupMessage) => any;
}
export interface DeleteGlobalReplicationGroupResult {
    
    GlobalReplicationGroup?: GlobalReplicationGroup;
}
export declare namespace DeleteGlobalReplicationGroupResult {
    
    const filterSensitiveLog: (obj: DeleteGlobalReplicationGroupResult) => any;
}

export interface DeleteReplicationGroupMessage {
    
    ReplicationGroupId: string | undefined;
    
    RetainPrimaryCluster?: boolean;
    
    FinalSnapshotIdentifier?: string;
}
export declare namespace DeleteReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: DeleteReplicationGroupMessage) => any;
}
export interface DeleteReplicationGroupResult {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace DeleteReplicationGroupResult {
    
    const filterSensitiveLog: (obj: DeleteReplicationGroupResult) => any;
}

export interface DeleteSnapshotMessage {
    
    SnapshotName: string | undefined;
}
export declare namespace DeleteSnapshotMessage {
    
    const filterSensitiveLog: (obj: DeleteSnapshotMessage) => any;
}
export interface DeleteSnapshotResult {
    
    Snapshot?: Snapshot;
}
export declare namespace DeleteSnapshotResult {
    
    const filterSensitiveLog: (obj: DeleteSnapshotResult) => any;
}

export interface DefaultUserAssociatedToUserGroupFault extends __SmithyException, $MetadataBearer {
    name: "DefaultUserAssociatedToUserGroupFault";
    $fault: "client";
    message?: string;
}
export declare namespace DefaultUserAssociatedToUserGroupFault {
    
    const filterSensitiveLog: (obj: DefaultUserAssociatedToUserGroupFault) => any;
}
export interface DeleteUserMessage {
    
    UserId: string | undefined;
}
export declare namespace DeleteUserMessage {
    
    const filterSensitiveLog: (obj: DeleteUserMessage) => any;
}

export interface InvalidUserStateFault extends __SmithyException, $MetadataBearer {
    name: "InvalidUserStateFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidUserStateFault {
    
    const filterSensitiveLog: (obj: InvalidUserStateFault) => any;
}
export interface DeleteUserGroupMessage {
    
    UserGroupId: string | undefined;
}
export declare namespace DeleteUserGroupMessage {
    
    const filterSensitiveLog: (obj: DeleteUserGroupMessage) => any;
}

export interface CacheClusterMessage {
    
    Marker?: string;
    
    CacheClusters?: CacheCluster[];
}
export declare namespace CacheClusterMessage {
    
    const filterSensitiveLog: (obj: CacheClusterMessage) => any;
}

export interface DescribeCacheClustersMessage {
    
    CacheClusterId?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
    
    ShowCacheNodeInfo?: boolean;
    
    ShowCacheClustersNotInReplicationGroups?: boolean;
}
export declare namespace DescribeCacheClustersMessage {
    
    const filterSensitiveLog: (obj: DescribeCacheClustersMessage) => any;
}

export interface CacheEngineVersion {
    
    Engine?: string;
    
    EngineVersion?: string;
    
    CacheParameterGroupFamily?: string;
    
    CacheEngineDescription?: string;
    
    CacheEngineVersionDescription?: string;
}
export declare namespace CacheEngineVersion {
    
    const filterSensitiveLog: (obj: CacheEngineVersion) => any;
}

export interface CacheEngineVersionMessage {
    
    Marker?: string;
    
    CacheEngineVersions?: CacheEngineVersion[];
}
export declare namespace CacheEngineVersionMessage {
    
    const filterSensitiveLog: (obj: CacheEngineVersionMessage) => any;
}

export interface DescribeCacheEngineVersionsMessage {
    
    Engine?: string;
    
    EngineVersion?: string;
    
    CacheParameterGroupFamily?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
    
    DefaultOnly?: boolean;
}
export declare namespace DescribeCacheEngineVersionsMessage {
    
    const filterSensitiveLog: (obj: DescribeCacheEngineVersionsMessage) => any;
}

export interface CacheParameterGroupsMessage {
    
    Marker?: string;
    
    CacheParameterGroups?: CacheParameterGroup[];
}
export declare namespace CacheParameterGroupsMessage {
    
    const filterSensitiveLog: (obj: CacheParameterGroupsMessage) => any;
}

export interface DescribeCacheParameterGroupsMessage {
    
    CacheParameterGroupName?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeCacheParameterGroupsMessage {
    
    const filterSensitiveLog: (obj: DescribeCacheParameterGroupsMessage) => any;
}

export interface CacheNodeTypeSpecificValue {
    
    CacheNodeType?: string;
    
    Value?: string;
}
export declare namespace CacheNodeTypeSpecificValue {
    
    const filterSensitiveLog: (obj: CacheNodeTypeSpecificValue) => any;
}
export declare type ChangeType = "immediate" | "requires-reboot";

export interface CacheNodeTypeSpecificParameter {
    
    ParameterName?: string;
    
    Description?: string;
    
    Source?: string;
    
    DataType?: string;
    
    AllowedValues?: string;
    
    IsModifiable?: boolean;
    
    MinimumEngineVersion?: string;
    
    CacheNodeTypeSpecificValues?: CacheNodeTypeSpecificValue[];
    
    ChangeType?: ChangeType | string;
}
export declare namespace CacheNodeTypeSpecificParameter {
    
    const filterSensitiveLog: (obj: CacheNodeTypeSpecificParameter) => any;
}

export interface Parameter {
    
    ParameterName?: string;
    
    ParameterValue?: string;
    
    Description?: string;
    
    Source?: string;
    
    DataType?: string;
    
    AllowedValues?: string;
    
    IsModifiable?: boolean;
    
    MinimumEngineVersion?: string;
    
    ChangeType?: ChangeType | string;
}
export declare namespace Parameter {
    
    const filterSensitiveLog: (obj: Parameter) => any;
}

export interface CacheParameterGroupDetails {
    
    Marker?: string;
    
    Parameters?: Parameter[];
    
    CacheNodeTypeSpecificParameters?: CacheNodeTypeSpecificParameter[];
}
export declare namespace CacheParameterGroupDetails {
    
    const filterSensitiveLog: (obj: CacheParameterGroupDetails) => any;
}

export interface DescribeCacheParametersMessage {
    
    CacheParameterGroupName: string | undefined;
    
    Source?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeCacheParametersMessage {
    
    const filterSensitiveLog: (obj: DescribeCacheParametersMessage) => any;
}

export interface CacheSecurityGroupMessage {
    
    Marker?: string;
    
    CacheSecurityGroups?: CacheSecurityGroup[];
}
export declare namespace CacheSecurityGroupMessage {
    
    const filterSensitiveLog: (obj: CacheSecurityGroupMessage) => any;
}

export interface DescribeCacheSecurityGroupsMessage {
    
    CacheSecurityGroupName?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeCacheSecurityGroupsMessage {
    
    const filterSensitiveLog: (obj: DescribeCacheSecurityGroupsMessage) => any;
}

export interface CacheSubnetGroupMessage {
    
    Marker?: string;
    
    CacheSubnetGroups?: CacheSubnetGroup[];
}
export declare namespace CacheSubnetGroupMessage {
    
    const filterSensitiveLog: (obj: CacheSubnetGroupMessage) => any;
}

export interface DescribeCacheSubnetGroupsMessage {
    
    CacheSubnetGroupName?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeCacheSubnetGroupsMessage {
    
    const filterSensitiveLog: (obj: DescribeCacheSubnetGroupsMessage) => any;
}

export interface DescribeEngineDefaultParametersMessage {
    
    CacheParameterGroupFamily: string | undefined;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeEngineDefaultParametersMessage {
    
    const filterSensitiveLog: (obj: DescribeEngineDefaultParametersMessage) => any;
}

export interface EngineDefaults {
    
    CacheParameterGroupFamily?: string;
    
    Marker?: string;
    
    Parameters?: Parameter[];
    
    CacheNodeTypeSpecificParameters?: CacheNodeTypeSpecificParameter[];
}
export declare namespace EngineDefaults {
    
    const filterSensitiveLog: (obj: EngineDefaults) => any;
}
export interface DescribeEngineDefaultParametersResult {
    
    EngineDefaults?: EngineDefaults;
}
export declare namespace DescribeEngineDefaultParametersResult {
    
    const filterSensitiveLog: (obj: DescribeEngineDefaultParametersResult) => any;
}
export declare type SourceType = "cache-cluster" | "cache-parameter-group" | "cache-security-group" | "cache-subnet-group" | "replication-group" | "user" | "user-group";

export interface DescribeEventsMessage {
    
    SourceIdentifier?: string;
    
    SourceType?: SourceType | string;
    
    StartTime?: Date;
    
    EndTime?: Date;
    
    Duration?: number;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeEventsMessage {
    
    const filterSensitiveLog: (obj: DescribeEventsMessage) => any;
}

export interface Event {
    
    SourceIdentifier?: string;
    
    SourceType?: SourceType | string;
    
    Message?: string;
    
    Date?: Date;
}
export declare namespace Event {
    
    const filterSensitiveLog: (obj: Event) => any;
}

export interface EventsMessage {
    
    Marker?: string;
    
    Events?: Event[];
}
export declare namespace EventsMessage {
    
    const filterSensitiveLog: (obj: EventsMessage) => any;
}
export interface DescribeGlobalReplicationGroupsMessage {
    
    GlobalReplicationGroupId?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
    
    ShowMemberInfo?: boolean;
}
export declare namespace DescribeGlobalReplicationGroupsMessage {
    
    const filterSensitiveLog: (obj: DescribeGlobalReplicationGroupsMessage) => any;
}
export interface DescribeGlobalReplicationGroupsResult {
    
    Marker?: string;
    
    GlobalReplicationGroups?: GlobalReplicationGroup[];
}
export declare namespace DescribeGlobalReplicationGroupsResult {
    
    const filterSensitiveLog: (obj: DescribeGlobalReplicationGroupsResult) => any;
}

export interface DescribeReplicationGroupsMessage {
    
    ReplicationGroupId?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeReplicationGroupsMessage {
    
    const filterSensitiveLog: (obj: DescribeReplicationGroupsMessage) => any;
}

export interface ReplicationGroupMessage {
    
    Marker?: string;
    
    ReplicationGroups?: ReplicationGroup[];
}
export declare namespace ReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: ReplicationGroupMessage) => any;
}

export interface DescribeReservedCacheNodesMessage {
    
    ReservedCacheNodeId?: string;
    
    ReservedCacheNodesOfferingId?: string;
    
    CacheNodeType?: string;
    
    Duration?: string;
    
    ProductDescription?: string;
    
    OfferingType?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeReservedCacheNodesMessage {
    
    const filterSensitiveLog: (obj: DescribeReservedCacheNodesMessage) => any;
}

export interface RecurringCharge {
    
    RecurringChargeAmount?: number;
    
    RecurringChargeFrequency?: string;
}
export declare namespace RecurringCharge {
    
    const filterSensitiveLog: (obj: RecurringCharge) => any;
}

export interface ReservedCacheNode {
    
    ReservedCacheNodeId?: string;
    
    ReservedCacheNodesOfferingId?: string;
    
    CacheNodeType?: string;
    
    StartTime?: Date;
    
    Duration?: number;
    
    FixedPrice?: number;
    
    UsagePrice?: number;
    
    CacheNodeCount?: number;
    
    ProductDescription?: string;
    
    OfferingType?: string;
    
    State?: string;
    
    RecurringCharges?: RecurringCharge[];
    
    ReservationARN?: string;
}
export declare namespace ReservedCacheNode {
    
    const filterSensitiveLog: (obj: ReservedCacheNode) => any;
}

export interface ReservedCacheNodeMessage {
    
    Marker?: string;
    
    ReservedCacheNodes?: ReservedCacheNode[];
}
export declare namespace ReservedCacheNodeMessage {
    
    const filterSensitiveLog: (obj: ReservedCacheNodeMessage) => any;
}

export interface DescribeReservedCacheNodesOfferingsMessage {
    
    ReservedCacheNodesOfferingId?: string;
    
    CacheNodeType?: string;
    
    Duration?: string;
    
    ProductDescription?: string;
    
    OfferingType?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeReservedCacheNodesOfferingsMessage {
    
    const filterSensitiveLog: (obj: DescribeReservedCacheNodesOfferingsMessage) => any;
}

export interface ReservedCacheNodesOffering {
    
    ReservedCacheNodesOfferingId?: string;
    
    CacheNodeType?: string;
    
    Duration?: number;
    
    FixedPrice?: number;
    
    UsagePrice?: number;
    
    ProductDescription?: string;
    
    OfferingType?: string;
    
    RecurringCharges?: RecurringCharge[];
}
export declare namespace ReservedCacheNodesOffering {
    
    const filterSensitiveLog: (obj: ReservedCacheNodesOffering) => any;
}

export interface ReservedCacheNodesOfferingMessage {
    
    Marker?: string;
    
    ReservedCacheNodesOfferings?: ReservedCacheNodesOffering[];
}
export declare namespace ReservedCacheNodesOfferingMessage {
    
    const filterSensitiveLog: (obj: ReservedCacheNodesOfferingMessage) => any;
}

export interface ReservedCacheNodesOfferingNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "ReservedCacheNodesOfferingNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace ReservedCacheNodesOfferingNotFoundFault {
    
    const filterSensitiveLog: (obj: ReservedCacheNodesOfferingNotFoundFault) => any;
}
export declare enum ServiceUpdateStatus {
    AVAILABLE = "available",
    CANCELLED = "cancelled",
    EXPIRED = "expired"
}
export interface DescribeServiceUpdatesMessage {
    
    ServiceUpdateName?: string;
    
    ServiceUpdateStatus?: (ServiceUpdateStatus | string)[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeServiceUpdatesMessage {
    
    const filterSensitiveLog: (obj: DescribeServiceUpdatesMessage) => any;
}
export declare enum ServiceUpdateSeverity {
    CRITICAL = "critical",
    IMPORTANT = "important",
    LOW = "low",
    MEDIUM = "medium"
}
export declare enum ServiceUpdateType {
    SECURITY_UPDATE = "security-update"
}

export interface ServiceUpdate {
    
    ServiceUpdateName?: string;
    
    ServiceUpdateReleaseDate?: Date;
    
    ServiceUpdateEndDate?: Date;
    
    ServiceUpdateSeverity?: ServiceUpdateSeverity | string;
    
    ServiceUpdateRecommendedApplyByDate?: Date;
    
    ServiceUpdateStatus?: ServiceUpdateStatus | string;
    
    ServiceUpdateDescription?: string;
    
    ServiceUpdateType?: ServiceUpdateType | string;
    
    Engine?: string;
    
    EngineVersion?: string;
    
    AutoUpdateAfterRecommendedApplyByDate?: boolean;
    
    EstimatedUpdateTime?: string;
}
export declare namespace ServiceUpdate {
    
    const filterSensitiveLog: (obj: ServiceUpdate) => any;
}
export interface ServiceUpdatesMessage {
    
    Marker?: string;
    
    ServiceUpdates?: ServiceUpdate[];
}
export declare namespace ServiceUpdatesMessage {
    
    const filterSensitiveLog: (obj: ServiceUpdatesMessage) => any;
}

export interface DescribeSnapshotsListMessage {
    
    Marker?: string;
    
    Snapshots?: Snapshot[];
}
export declare namespace DescribeSnapshotsListMessage {
    
    const filterSensitiveLog: (obj: DescribeSnapshotsListMessage) => any;
}

export interface DescribeSnapshotsMessage {
    
    ReplicationGroupId?: string;
    
    CacheClusterId?: string;
    
    SnapshotName?: string;
    
    SnapshotSource?: string;
    
    Marker?: string;
    
    MaxRecords?: number;
    
    ShowNodeGroupConfig?: boolean;
}
export declare namespace DescribeSnapshotsMessage {
    
    const filterSensitiveLog: (obj: DescribeSnapshotsMessage) => any;
}

export interface TimeRangeFilter {
    
    StartTime?: Date;
    
    EndTime?: Date;
}
export declare namespace TimeRangeFilter {
    
    const filterSensitiveLog: (obj: TimeRangeFilter) => any;
}
export interface DescribeUpdateActionsMessage {
    
    ServiceUpdateName?: string;
    
    ReplicationGroupIds?: string[];
    
    CacheClusterIds?: string[];
    
    Engine?: string;
    
    ServiceUpdateStatus?: (ServiceUpdateStatus | string)[];
    
    ServiceUpdateTimeRange?: TimeRangeFilter;
    
    UpdateActionStatus?: (UpdateActionStatus | string)[];
    
    ShowNodeLevelUpdateStatus?: boolean;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeUpdateActionsMessage {
    
    const filterSensitiveLog: (obj: DescribeUpdateActionsMessage) => any;
}
export declare enum NodeUpdateInitiatedBy {
    CUSTOMER = "customer",
    SYSTEM = "system"
}
export declare enum NodeUpdateStatus {
    COMPLETE = "complete",
    IN_PROGRESS = "in-progress",
    NOT_APPLIED = "not-applied",
    STOPPED = "stopped",
    STOPPING = "stopping",
    WAITING_TO_START = "waiting-to-start"
}

export interface CacheNodeUpdateStatus {
    
    CacheNodeId?: string;
    
    NodeUpdateStatus?: NodeUpdateStatus | string;
    
    NodeDeletionDate?: Date;
    
    NodeUpdateStartDate?: Date;
    
    NodeUpdateEndDate?: Date;
    
    NodeUpdateInitiatedBy?: NodeUpdateInitiatedBy | string;
    
    NodeUpdateInitiatedDate?: Date;
    
    NodeUpdateStatusModifiedDate?: Date;
}
export declare namespace CacheNodeUpdateStatus {
    
    const filterSensitiveLog: (obj: CacheNodeUpdateStatus) => any;
}

export interface NodeGroupMemberUpdateStatus {
    
    CacheClusterId?: string;
    
    CacheNodeId?: string;
    
    NodeUpdateStatus?: NodeUpdateStatus | string;
    
    NodeDeletionDate?: Date;
    
    NodeUpdateStartDate?: Date;
    
    NodeUpdateEndDate?: Date;
    
    NodeUpdateInitiatedBy?: NodeUpdateInitiatedBy | string;
    
    NodeUpdateInitiatedDate?: Date;
    
    NodeUpdateStatusModifiedDate?: Date;
}
export declare namespace NodeGroupMemberUpdateStatus {
    
    const filterSensitiveLog: (obj: NodeGroupMemberUpdateStatus) => any;
}

export interface NodeGroupUpdateStatus {
    
    NodeGroupId?: string;
    
    NodeGroupMemberUpdateStatus?: NodeGroupMemberUpdateStatus[];
}
export declare namespace NodeGroupUpdateStatus {
    
    const filterSensitiveLog: (obj: NodeGroupUpdateStatus) => any;
}
export declare enum SlaMet {
    NA = "n/a",
    NO = "no",
    YES = "yes"
}

export interface UpdateAction {
    
    ReplicationGroupId?: string;
    
    CacheClusterId?: string;
    
    ServiceUpdateName?: string;
    
    ServiceUpdateReleaseDate?: Date;
    
    ServiceUpdateSeverity?: ServiceUpdateSeverity | string;
    
    ServiceUpdateStatus?: ServiceUpdateStatus | string;
    
    ServiceUpdateRecommendedApplyByDate?: Date;
    
    ServiceUpdateType?: ServiceUpdateType | string;
    
    UpdateActionAvailableDate?: Date;
    
    UpdateActionStatus?: UpdateActionStatus | string;
    
    NodesUpdated?: string;
    
    UpdateActionStatusModifiedDate?: Date;
    
    SlaMet?: SlaMet | string;
    
    NodeGroupUpdateStatus?: NodeGroupUpdateStatus[];
    
    CacheNodeUpdateStatus?: CacheNodeUpdateStatus[];
    
    EstimatedUpdateTime?: string;
    
    Engine?: string;
}
export declare namespace UpdateAction {
    
    const filterSensitiveLog: (obj: UpdateAction) => any;
}
export interface UpdateActionsMessage {
    
    Marker?: string;
    
    UpdateActions?: UpdateAction[];
}
export declare namespace UpdateActionsMessage {
    
    const filterSensitiveLog: (obj: UpdateActionsMessage) => any;
}
export interface DescribeUserGroupsMessage {
    
    UserGroupId?: string;
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeUserGroupsMessage {
    
    const filterSensitiveLog: (obj: DescribeUserGroupsMessage) => any;
}
export interface DescribeUserGroupsResult {
    
    UserGroups?: UserGroup[];
    
    Marker?: string;
}
export declare namespace DescribeUserGroupsResult {
    
    const filterSensitiveLog: (obj: DescribeUserGroupsResult) => any;
}

export interface Filter {
    
    Name: string | undefined;
    
    Values: string[] | undefined;
}
export declare namespace Filter {
    
    const filterSensitiveLog: (obj: Filter) => any;
}
export interface DescribeUsersMessage {
    
    Engine?: string;
    
    UserId?: string;
    
    Filters?: Filter[];
    
    MaxRecords?: number;
    
    Marker?: string;
}
export declare namespace DescribeUsersMessage {
    
    const filterSensitiveLog: (obj: DescribeUsersMessage) => any;
}
export interface DescribeUsersResult {
    
    Users?: User[];
    
    Marker?: string;
}
export declare namespace DescribeUsersResult {
    
    const filterSensitiveLog: (obj: DescribeUsersResult) => any;
}
export interface DisassociateGlobalReplicationGroupMessage {
    
    GlobalReplicationGroupId: string | undefined;
    
    ReplicationGroupId: string | undefined;
    
    ReplicationGroupRegion: string | undefined;
}
export declare namespace DisassociateGlobalReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: DisassociateGlobalReplicationGroupMessage) => any;
}
export interface DisassociateGlobalReplicationGroupResult {
    
    GlobalReplicationGroup?: GlobalReplicationGroup;
}
export declare namespace DisassociateGlobalReplicationGroupResult {
    
    const filterSensitiveLog: (obj: DisassociateGlobalReplicationGroupResult) => any;
}
export interface FailoverGlobalReplicationGroupMessage {
    
    GlobalReplicationGroupId: string | undefined;
    
    PrimaryRegion: string | undefined;
    
    PrimaryReplicationGroupId: string | undefined;
}
export declare namespace FailoverGlobalReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: FailoverGlobalReplicationGroupMessage) => any;
}
export interface FailoverGlobalReplicationGroupResult {
    
    GlobalReplicationGroup?: GlobalReplicationGroup;
}
export declare namespace FailoverGlobalReplicationGroupResult {
    
    const filterSensitiveLog: (obj: FailoverGlobalReplicationGroupResult) => any;
}

export interface ReshardingConfiguration {
    
    NodeGroupId?: string;
    
    PreferredAvailabilityZones?: string[];
}
export declare namespace ReshardingConfiguration {
    
    const filterSensitiveLog: (obj: ReshardingConfiguration) => any;
}

export interface RegionalConfiguration {
    
    ReplicationGroupId: string | undefined;
    
    ReplicationGroupRegion: string | undefined;
    
    ReshardingConfiguration: ReshardingConfiguration[] | undefined;
}
export declare namespace RegionalConfiguration {
    
    const filterSensitiveLog: (obj: RegionalConfiguration) => any;
}
export interface IncreaseNodeGroupsInGlobalReplicationGroupMessage {
    
    GlobalReplicationGroupId: string | undefined;
    
    NodeGroupCount: number | undefined;
    
    RegionalConfigurations?: RegionalConfiguration[];
    
    ApplyImmediately: boolean | undefined;
}
export declare namespace IncreaseNodeGroupsInGlobalReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: IncreaseNodeGroupsInGlobalReplicationGroupMessage) => any;
}
export interface IncreaseNodeGroupsInGlobalReplicationGroupResult {
    
    GlobalReplicationGroup?: GlobalReplicationGroup;
}
export declare namespace IncreaseNodeGroupsInGlobalReplicationGroupResult {
    
    const filterSensitiveLog: (obj: IncreaseNodeGroupsInGlobalReplicationGroupResult) => any;
}
export interface IncreaseReplicaCountMessage {
    
    ReplicationGroupId: string | undefined;
    
    NewReplicaCount?: number;
    
    ReplicaConfiguration?: ConfigureShard[];
    
    ApplyImmediately: boolean | undefined;
}
export declare namespace IncreaseReplicaCountMessage {
    
    const filterSensitiveLog: (obj: IncreaseReplicaCountMessage) => any;
}
export interface IncreaseReplicaCountResult {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace IncreaseReplicaCountResult {
    
    const filterSensitiveLog: (obj: IncreaseReplicaCountResult) => any;
}

export interface InvalidKMSKeyFault extends __SmithyException, $MetadataBearer {
    name: "InvalidKMSKeyFault";
    $fault: "client";
    message?: string;
}
export declare namespace InvalidKMSKeyFault {
    
    const filterSensitiveLog: (obj: InvalidKMSKeyFault) => any;
}

export interface ListAllowedNodeTypeModificationsMessage {
    
    CacheClusterId?: string;
    
    ReplicationGroupId?: string;
}
export declare namespace ListAllowedNodeTypeModificationsMessage {
    
    const filterSensitiveLog: (obj: ListAllowedNodeTypeModificationsMessage) => any;
}

export interface ListTagsForResourceMessage {
    
    ResourceName: string | undefined;
}
export declare namespace ListTagsForResourceMessage {
    
    const filterSensitiveLog: (obj: ListTagsForResourceMessage) => any;
}
export declare type AuthTokenUpdateStrategyType = "DELETE" | "ROTATE" | "SET";

export interface ModifyCacheClusterMessage {
    
    CacheClusterId: string | undefined;
    
    NumCacheNodes?: number;
    
    CacheNodeIdsToRemove?: string[];
    
    AZMode?: AZMode | string;
    
    NewAvailabilityZones?: string[];
    
    CacheSecurityGroupNames?: string[];
    
    SecurityGroupIds?: string[];
    
    PreferredMaintenanceWindow?: string;
    
    NotificationTopicArn?: string;
    
    CacheParameterGroupName?: string;
    
    NotificationTopicStatus?: string;
    
    ApplyImmediately?: boolean;
    
    EngineVersion?: string;
    
    AutoMinorVersionUpgrade?: boolean;
    
    SnapshotRetentionLimit?: number;
    
    SnapshotWindow?: string;
    
    CacheNodeType?: string;
    
    AuthToken?: string;
    
    AuthTokenUpdateStrategy?: AuthTokenUpdateStrategyType | string;
    
    LogDeliveryConfigurations?: LogDeliveryConfigurationRequest[];
}
export declare namespace ModifyCacheClusterMessage {
    
    const filterSensitiveLog: (obj: ModifyCacheClusterMessage) => any;
}
export interface ModifyCacheClusterResult {
    
    CacheCluster?: CacheCluster;
}
export declare namespace ModifyCacheClusterResult {
    
    const filterSensitiveLog: (obj: ModifyCacheClusterResult) => any;
}

export interface CacheParameterGroupNameMessage {
    
    CacheParameterGroupName?: string;
}
export declare namespace CacheParameterGroupNameMessage {
    
    const filterSensitiveLog: (obj: CacheParameterGroupNameMessage) => any;
}

export interface ParameterNameValue {
    
    ParameterName?: string;
    
    ParameterValue?: string;
}
export declare namespace ParameterNameValue {
    
    const filterSensitiveLog: (obj: ParameterNameValue) => any;
}

export interface ModifyCacheParameterGroupMessage {
    
    CacheParameterGroupName: string | undefined;
    
    ParameterNameValues: ParameterNameValue[] | undefined;
}
export declare namespace ModifyCacheParameterGroupMessage {
    
    const filterSensitiveLog: (obj: ModifyCacheParameterGroupMessage) => any;
}

export interface ModifyCacheSubnetGroupMessage {
    
    CacheSubnetGroupName: string | undefined;
    
    CacheSubnetGroupDescription?: string;
    
    SubnetIds?: string[];
}
export declare namespace ModifyCacheSubnetGroupMessage {
    
    const filterSensitiveLog: (obj: ModifyCacheSubnetGroupMessage) => any;
}
export interface ModifyCacheSubnetGroupResult {
    
    CacheSubnetGroup?: CacheSubnetGroup;
}
export declare namespace ModifyCacheSubnetGroupResult {
    
    const filterSensitiveLog: (obj: ModifyCacheSubnetGroupResult) => any;
}

export interface SubnetInUse extends __SmithyException, $MetadataBearer {
    name: "SubnetInUse";
    $fault: "client";
    message?: string;
}
export declare namespace SubnetInUse {
    
    const filterSensitiveLog: (obj: SubnetInUse) => any;
}
export interface ModifyGlobalReplicationGroupMessage {
    
    GlobalReplicationGroupId: string | undefined;
    
    ApplyImmediately: boolean | undefined;
    
    CacheNodeType?: string;
    
    EngineVersion?: string;
    
    CacheParameterGroupName?: string;
    
    GlobalReplicationGroupDescription?: string;
    
    AutomaticFailoverEnabled?: boolean;
}
export declare namespace ModifyGlobalReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: ModifyGlobalReplicationGroupMessage) => any;
}
export interface ModifyGlobalReplicationGroupResult {
    
    GlobalReplicationGroup?: GlobalReplicationGroup;
}
export declare namespace ModifyGlobalReplicationGroupResult {
    
    const filterSensitiveLog: (obj: ModifyGlobalReplicationGroupResult) => any;
}

export interface ModifyReplicationGroupMessage {
    
    ReplicationGroupId: string | undefined;
    
    ReplicationGroupDescription?: string;
    
    PrimaryClusterId?: string;
    
    SnapshottingClusterId?: string;
    
    AutomaticFailoverEnabled?: boolean;
    
    MultiAZEnabled?: boolean;
    
    NodeGroupId?: string;
    
    CacheSecurityGroupNames?: string[];
    
    SecurityGroupIds?: string[];
    
    PreferredMaintenanceWindow?: string;
    
    NotificationTopicArn?: string;
    
    CacheParameterGroupName?: string;
    
    NotificationTopicStatus?: string;
    
    ApplyImmediately?: boolean;
    
    EngineVersion?: string;
    
    AutoMinorVersionUpgrade?: boolean;
    
    SnapshotRetentionLimit?: number;
    
    SnapshotWindow?: string;
    
    CacheNodeType?: string;
    
    AuthToken?: string;
    
    AuthTokenUpdateStrategy?: AuthTokenUpdateStrategyType | string;
    
    UserGroupIdsToAdd?: string[];
    
    UserGroupIdsToRemove?: string[];
    
    RemoveUserGroups?: boolean;
    
    LogDeliveryConfigurations?: LogDeliveryConfigurationRequest[];
}
export declare namespace ModifyReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: ModifyReplicationGroupMessage) => any;
}
export interface ModifyReplicationGroupResult {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace ModifyReplicationGroupResult {
    
    const filterSensitiveLog: (obj: ModifyReplicationGroupResult) => any;
}

export interface ModifyReplicationGroupShardConfigurationMessage {
    
    ReplicationGroupId: string | undefined;
    
    NodeGroupCount: number | undefined;
    
    ApplyImmediately: boolean | undefined;
    
    ReshardingConfiguration?: ReshardingConfiguration[];
    
    NodeGroupsToRemove?: string[];
    
    NodeGroupsToRetain?: string[];
}
export declare namespace ModifyReplicationGroupShardConfigurationMessage {
    
    const filterSensitiveLog: (obj: ModifyReplicationGroupShardConfigurationMessage) => any;
}
export interface ModifyReplicationGroupShardConfigurationResult {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace ModifyReplicationGroupShardConfigurationResult {
    
    const filterSensitiveLog: (obj: ModifyReplicationGroupShardConfigurationResult) => any;
}
export interface ModifyUserMessage {
    
    UserId: string | undefined;
    
    AccessString?: string;
    
    AppendAccessString?: string;
    
    Passwords?: string[];
    
    NoPasswordRequired?: boolean;
}
export declare namespace ModifyUserMessage {
    
    const filterSensitiveLog: (obj: ModifyUserMessage) => any;
}
export interface ModifyUserGroupMessage {
    
    UserGroupId: string | undefined;
    
    UserIdsToAdd?: string[];
    
    UserIdsToRemove?: string[];
}
export declare namespace ModifyUserGroupMessage {
    
    const filterSensitiveLog: (obj: ModifyUserGroupMessage) => any;
}

export interface PurchaseReservedCacheNodesOfferingMessage {
    
    ReservedCacheNodesOfferingId: string | undefined;
    
    ReservedCacheNodeId?: string;
    
    CacheNodeCount?: number;
    
    Tags?: Tag[];
}
export declare namespace PurchaseReservedCacheNodesOfferingMessage {
    
    const filterSensitiveLog: (obj: PurchaseReservedCacheNodesOfferingMessage) => any;
}
export interface PurchaseReservedCacheNodesOfferingResult {
    
    ReservedCacheNode?: ReservedCacheNode;
}
export declare namespace PurchaseReservedCacheNodesOfferingResult {
    
    const filterSensitiveLog: (obj: PurchaseReservedCacheNodesOfferingResult) => any;
}

export interface ReservedCacheNodeAlreadyExistsFault extends __SmithyException, $MetadataBearer {
    name: "ReservedCacheNodeAlreadyExistsFault";
    $fault: "client";
    message?: string;
}
export declare namespace ReservedCacheNodeAlreadyExistsFault {
    
    const filterSensitiveLog: (obj: ReservedCacheNodeAlreadyExistsFault) => any;
}

export interface ReservedCacheNodeQuotaExceededFault extends __SmithyException, $MetadataBearer {
    name: "ReservedCacheNodeQuotaExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace ReservedCacheNodeQuotaExceededFault {
    
    const filterSensitiveLog: (obj: ReservedCacheNodeQuotaExceededFault) => any;
}
export interface RebalanceSlotsInGlobalReplicationGroupMessage {
    
    GlobalReplicationGroupId: string | undefined;
    
    ApplyImmediately: boolean | undefined;
}
export declare namespace RebalanceSlotsInGlobalReplicationGroupMessage {
    
    const filterSensitiveLog: (obj: RebalanceSlotsInGlobalReplicationGroupMessage) => any;
}
export interface RebalanceSlotsInGlobalReplicationGroupResult {
    
    GlobalReplicationGroup?: GlobalReplicationGroup;
}
export declare namespace RebalanceSlotsInGlobalReplicationGroupResult {
    
    const filterSensitiveLog: (obj: RebalanceSlotsInGlobalReplicationGroupResult) => any;
}

export interface RebootCacheClusterMessage {
    
    CacheClusterId: string | undefined;
    
    CacheNodeIdsToReboot: string[] | undefined;
}
export declare namespace RebootCacheClusterMessage {
    
    const filterSensitiveLog: (obj: RebootCacheClusterMessage) => any;
}
export interface RebootCacheClusterResult {
    
    CacheCluster?: CacheCluster;
}
export declare namespace RebootCacheClusterResult {
    
    const filterSensitiveLog: (obj: RebootCacheClusterResult) => any;
}

export interface RemoveTagsFromResourceMessage {
    
    ResourceName: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace RemoveTagsFromResourceMessage {
    
    const filterSensitiveLog: (obj: RemoveTagsFromResourceMessage) => any;
}

export interface TagNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "TagNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace TagNotFoundFault {
    
    const filterSensitiveLog: (obj: TagNotFoundFault) => any;
}

export interface ResetCacheParameterGroupMessage {
    
    CacheParameterGroupName: string | undefined;
    
    ResetAllParameters?: boolean;
    
    ParameterNameValues?: ParameterNameValue[];
}
export declare namespace ResetCacheParameterGroupMessage {
    
    const filterSensitiveLog: (obj: ResetCacheParameterGroupMessage) => any;
}

export interface AuthorizationNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "AuthorizationNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace AuthorizationNotFoundFault {
    
    const filterSensitiveLog: (obj: AuthorizationNotFoundFault) => any;
}

export interface RevokeCacheSecurityGroupIngressMessage {
    
    CacheSecurityGroupName: string | undefined;
    
    EC2SecurityGroupName: string | undefined;
    
    EC2SecurityGroupOwnerId: string | undefined;
}
export declare namespace RevokeCacheSecurityGroupIngressMessage {
    
    const filterSensitiveLog: (obj: RevokeCacheSecurityGroupIngressMessage) => any;
}
export interface RevokeCacheSecurityGroupIngressResult {
    
    CacheSecurityGroup?: CacheSecurityGroup;
}
export declare namespace RevokeCacheSecurityGroupIngressResult {
    
    const filterSensitiveLog: (obj: RevokeCacheSecurityGroupIngressResult) => any;
}

export interface ReplicationGroupAlreadyUnderMigrationFault extends __SmithyException, $MetadataBearer {
    name: "ReplicationGroupAlreadyUnderMigrationFault";
    $fault: "client";
    message?: string;
}
export declare namespace ReplicationGroupAlreadyUnderMigrationFault {
    
    const filterSensitiveLog: (obj: ReplicationGroupAlreadyUnderMigrationFault) => any;
}

export interface CustomerNodeEndpoint {
    
    Address?: string;
    
    Port?: number;
}
export declare namespace CustomerNodeEndpoint {
    
    const filterSensitiveLog: (obj: CustomerNodeEndpoint) => any;
}
export interface StartMigrationMessage {
    
    ReplicationGroupId: string | undefined;
    
    CustomerNodeEndpointList: CustomerNodeEndpoint[] | undefined;
}
export declare namespace StartMigrationMessage {
    
    const filterSensitiveLog: (obj: StartMigrationMessage) => any;
}
export interface StartMigrationResponse {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace StartMigrationResponse {
    
    const filterSensitiveLog: (obj: StartMigrationResponse) => any;
}

export interface APICallRateForCustomerExceededFault extends __SmithyException, $MetadataBearer {
    name: "APICallRateForCustomerExceededFault";
    $fault: "client";
    message?: string;
}
export declare namespace APICallRateForCustomerExceededFault {
    
    const filterSensitiveLog: (obj: APICallRateForCustomerExceededFault) => any;
}

export interface NodeGroupNotFoundFault extends __SmithyException, $MetadataBearer {
    name: "NodeGroupNotFoundFault";
    $fault: "client";
    message?: string;
}
export declare namespace NodeGroupNotFoundFault {
    
    const filterSensitiveLog: (obj: NodeGroupNotFoundFault) => any;
}
export interface TestFailoverMessage {
    
    ReplicationGroupId: string | undefined;
    
    NodeGroupId: string | undefined;
}
export declare namespace TestFailoverMessage {
    
    const filterSensitiveLog: (obj: TestFailoverMessage) => any;
}

export interface TestFailoverNotAvailableFault extends __SmithyException, $MetadataBearer {
    name: "TestFailoverNotAvailableFault";
    $fault: "client";
    message?: string;
}
export declare namespace TestFailoverNotAvailableFault {
    
    const filterSensitiveLog: (obj: TestFailoverNotAvailableFault) => any;
}
export interface TestFailoverResult {
    
    ReplicationGroup?: ReplicationGroup;
}
export declare namespace TestFailoverResult {
    
    const filterSensitiveLog: (obj: TestFailoverResult) => any;
}
