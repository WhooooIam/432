{"version":3,"sources":["twitterclient.js","App.js","reportWebVitals.js","index.js"],"names":["createTable","tweets","length","console","log","className","TwitterRoute","useState","hashtag","setHashtag","htmlhashtag","setHtmlhashtag","id","text","hastags","tweetdata","error","setError","type","value","placeholder","onChange","e","target","encodeURIComponent","onClick","fetch","then","response","json","data","catch","getTweets","rsp","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OA0BA,SAASA,EAAYC,GAEjB,GAAqB,IAAlBA,EAAOC,QAAkC,IAAlBD,EAAOC,OAE7B,OADAC,QAAQC,IAAIH,EAAOC,QAEf,8BACI,uBAAOG,UAAY,YAAnB,SACI,qBAAIA,UAAY,UAAhB,UACI,2CACA,yCACA,yDAkBT,SAASC,IAGpB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,mBAAS,CAAC,CAACK,GAAI,GAAIC,KAAM,GAAIC,QAAS,MAAxE,mBAAOC,EAAP,KACA,GADA,KAC0BR,mBAAS,KAAnC,mBAAOS,EAAP,KAAcC,EAAd,KAEA,OACI,gCACI,0DACA,6BAAKD,IACL,4GAGA,2CAAa,mDACb,sBAAKX,UAAY,YAAjB,UACA,6CACI,uBACIA,UAAY,UACZa,KAAK,OACLN,GAAK,UACLO,MAASX,EACTY,YAAc,mBACdC,SAAa,SAACC,GACV,IAAQH,EAAUG,EAAEC,OAAZJ,MACRV,EAAWU,GACXR,EAAea,mBAAmBL,UAI9C,wBACAM,QAAW,WACS,KAAZjB,EACAS,EAAS,uBAGTA,EAAS,IArFtB,SAAmBT,GAEtB,OAAOkB,MAAM,kBAAD,OAAmBlB,IAC9BmB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAEH,OADA3B,QAAQC,IAAI0B,GACLA,KAQdC,OAAM,SAACT,GAAOnB,QAAQC,IAAIkB,MAwEPU,CAAUtB,GACTiB,MAAK,SAACM,GAEH9B,QAAQC,IAAI6B,GAEO,IAAfA,EAAI/B,OACJe,EAAS,qEAGTA,EAAS,SAhBzB,yBAsBCjB,EAAYe,MC/FVmB,MARf,WACE,OACE,8BACE,cAAC5B,EAAD,OCKS6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0c92f122.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './twitterclient.css';\n\n/*\n    retieves the data from the server endpoint\n*/\nexport function getTweets(hashtag) {\n\n    return fetch(`/search/tweets/${hashtag}`)\n    .then((response) => response.json())\n    .then((data) => { \n        console.log(data);\n        return data})\n//     .then((rsp) => \n//     rsp.map((twt) => ({\n//         id: twt.user.name,\n//         text: twt.text,\n//         hashtags: twt.entities.hashtags\n//     })),\n// )\n.catch((e) => {console.log(e)});\n}\n\n/* \n    Creates table to display data to user\n*/\nfunction createTable(tweets) {\n    \n    if(tweets.length !== 1 && tweets.length !== 0)  {\n        console.log(tweets.length)\n        return (\n            <div>\n                <table className = \"DataTable\">\n                    <tr className = \"Headers\">\n                        <td> Tweet By</td>\n                        <td> Tweet </td>\n                        <td> Tweet Analysis </td>\n                    </tr>\n                    {/* { tweets.map((data) => {\n                        return(\n                            <tr>\n                                <td>{data.id}</td>\n                                <td>{data.text}</td>\n                                <td>Pos/Neg</td>\n                            </tr>\n                        )\n                    })\n                    } */}\n                </table>\n            </div>\n        )     \n    }\n}\n\nexport default function TwitterRoute() {\n\n    // Initialise Variables\n    const [hashtag, setHashtag] = useState(\"\");\n    const [htmlhashtag, setHtmlhashtag] = useState(\"\");\n    const [tweetdata, setTweetdata] = useState([{id: \"\", text: \"\", hastags: []}])\n    const [error, setError] = useState(\"\");\n\n    return(\n        <div>\n            <h1> Twitter Hashtag Search </h1>\n            <h3>{error}</h3>\n            <p> Search for tweets by hashtags. For mutliple\n                tags, use a space between tags\n            </p>\n            <p> Example: <i>#dog #cat #cute</i></p>\n            <div className = \"SearchBox\">\n            <label> Search: \n                <input \n                    className = \"TextBox\"\n                    type=\"text\" \n                    id = \"hashtag\"\n                    value = {hashtag}\n                    placeholder = \"Input search tag\"\n                    onChange = { (e) => {\n                        const { value } = e.target;\n                        setHashtag(value);\n                        setHtmlhashtag(encodeURIComponent(value))\n                    }}\n                />\n            </label>\n            <button \n            onClick = {() => {\n                if (hashtag === \"\") {\n                    setError(\"Please enter a tag\");\n                }\n                else {\n                    setError(\"\");\n                    getTweets(htmlhashtag)\n                    .then((rsp) => {\n                        //setTweetdata(rsp);\n                        console.log(rsp);\n                        //console.log(tweetdata);\n                        if (rsp.length === 0) {\n                            setError(\"No found tweets with tag/s searched. Try reducing or another tag!\");\n                        }\n                        else {\n                            setError(\"\");\n                        }\n                    })   \n                }\n            }}> Submit </button>\n            </div>\n            {createTable(tweetdata)}\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport TwitterRoute from './twitterclient.js'\n\nfunction App() {\n  return (\n    <div>\n      <TwitterRoute/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}